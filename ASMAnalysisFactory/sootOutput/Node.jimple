class Node extends java.lang.Object
{
    int d;

    static void <clinit>()
    {
        java.io.PrintStream temp$0;

        temp$0 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke temp$0.<java.io.PrintStream: void println(java.lang.String)>("static");
        return;
    }

    void <init>()
    {
        Node this;
        int i, temp$0, temp$1;
        java.lang.String temp$2, temp$3;
        char temp$4;
        java.io.PrintStream temp$5;

        this := @this: Node;
        specialinvoke this.<java.lang.Object: void <init>()>();
        i = 1;
        temp$0 = i;
        temp$1 = temp$0 + 1;
        i = temp$1;
        i = temp$0;
        temp$2 = new java.lang.String;
        specialinvoke temp$2.<java.lang.String: void <init>()>();
        temp$3 = virtualinvoke temp$2.<java.lang.String: java.lang.String substring(int,int)>(i, 10);
        temp$4 = virtualinvoke temp$3.<java.lang.String: char charAt(int)>(1);
        temp$5 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke temp$5.<java.io.PrintStream: void println(java.lang.String)>("instance");
        return;
    }

    int getNumber(int)
    {
        Node this;
        int num, temp$0, sum, i, temp$1, temp$2, temp$3, temp$4, temp$5, temp$6, temp$7, temp$8, temp$10;
        Node$Innner1 in, temp$9;

        this := @this: Node;
        num := @parameter0: int;
        if num <= 2 goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = 1;
        return temp$0;

     label1:
        nop;
        sum = 0;
        i = 1;

     label2:
        nop;
        if i < num goto label3;

        goto label4;

     label3:
        nop;
        temp$1 = sum;
        temp$2 = virtualinvoke this.<Node: int getNumber(int)>(i);
        temp$3 = num - i;
        temp$4 = virtualinvoke this.<Node: int getNumber(int)>(temp$3);
        temp$5 = temp$2 * temp$4;
        temp$6 = temp$1 + temp$5;
        sum = temp$6;
        nop;
        temp$7 = i;
        temp$8 = temp$7 + 1;
        i = temp$8;
        goto label2;

     label4:
        nop;
        temp$9 = new Node$Innner1;
        specialinvoke temp$9.<Node$Innner1: void <init>(Node,Node$Innner1$0)>(this, null);
        in = temp$9;
        temp$10 = in.<Node$Innner1: int i>;
        sum = temp$10;
        return sum;
    }

    public static void getCombind(java.lang.String, java.lang.String)
    {
        java.lang.String pre, charSet, temp$6, temp$8, temp$11, temp$12, temp$15;
        int temp$0, i, temp$2, temp$9, temp$10, temp$13, temp$14, temp$16, temp$17;
        java.io.PrintStream temp$1;
        java.lang.StringBuffer temp$3, temp$5, temp$7;
        char temp$4;

        pre := @parameter0: java.lang.String;
        charSet := @parameter1: java.lang.String;
        temp$0 = virtualinvoke charSet.<java.lang.String: int length()>();
        if temp$0 == 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$1 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke temp$1.<java.io.PrintStream: void println(java.lang.String)>(pre);
        return;

     label1:
        nop;
        i = 0;

     label2:
        nop;
        temp$2 = virtualinvoke charSet.<java.lang.String: int length()>();
        if i < temp$2 goto label3;

        goto label4;

     label3:
        nop;
        temp$3 = new java.lang.StringBuffer;
        specialinvoke temp$3.<java.lang.StringBuffer: void <init>(java.lang.String)>(pre);
        temp$4 = virtualinvoke charSet.<java.lang.String: char charAt(int)>(i);
        temp$5 = virtualinvoke temp$3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(temp$4);
        temp$6 = virtualinvoke temp$5.<java.lang.StringBuffer: java.lang.String toString()>();
        pre = temp$6;
        temp$7 = new java.lang.StringBuffer;
        specialinvoke temp$7.<java.lang.StringBuffer: void <init>()>();
        temp$8 = virtualinvoke charSet.<java.lang.String: java.lang.String substring(int,int)>(0, i);
        virtualinvoke temp$7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$8);
        temp$9 = i;
        temp$10 = temp$9 + 1;
        temp$11 = virtualinvoke charSet.<java.lang.String: java.lang.String substring(int)>(temp$10);
        virtualinvoke temp$7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(temp$11);
        temp$12 = virtualinvoke temp$7.<java.lang.StringBuffer: java.lang.String toString()>();
        staticinvoke <Node: void getCombind(java.lang.String,java.lang.String)>(pre, temp$12);
        temp$13 = virtualinvoke pre.<java.lang.String: int length()>();
        temp$14 = temp$13 - 1;
        temp$15 = virtualinvoke pre.<java.lang.String: java.lang.String substring(int,int)>(0, temp$14);
        pre = temp$15;
        nop;
        temp$16 = i;
        temp$17 = temp$16 + 1;
        i = temp$17;
        goto label2;

     label4:
        nop;
        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] args;
        Node[] temp;
        int i, temp$0, temp$1, temp$2, temp$3, temp$4, temp$5, temp$6, temp$7, temp$8;

        args := @parameter0: java.lang.String[];
        temp = newarray (Node)[2];
        staticinvoke <Node: void getCombind(java.lang.String,java.lang.String)>("", "abcd");
        i = 0;
        goto label4;

     label0:
        nop;
        temp$0 = i;
        temp$1 = temp$0 + 1;
        i = temp$1;

     label1:
        nop;
        temp$2 = i;
        temp$3 = temp$2 - 2;
        i = temp$3;

     label2:
        nop;
        temp$4 = i;
        temp$5 = temp$4 + -1;
        i = temp$5;

     label3:
        nop;
        temp$6 = i;
        temp$7 = temp$6 + 1;
        i = temp$7;
        goto label5;

     label4:
        nop;
        temp$8 = lengthof args;
        nop;
        tableswitch(temp$8)
        {
            case 1: goto label0;
            case 2: goto label1;
            case 3: goto label2;
            default: goto label3;
        };

     label5:
        nop;
        return;
    }
}
