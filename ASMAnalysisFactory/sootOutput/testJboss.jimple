public class testJboss extends java.lang.Object
{

    private final void getTest(testJboss)
    {
        testJboss this, o;

        this := @this: testJboss;
        o := @parameter0: testJboss;
        virtualinvoke o.<testJboss: void methodB()>();
        return;
    }

    public void testMessageConsumer(int)
    {
        testJboss this, temp$0, b, temp$1;
        int i;

        this := @this: testJboss;
        i := @parameter0: int;
        if i > 0 goto label0;

        goto label1;

     label0:
        nop;
        temp$0 = new testJboss;
        specialinvoke temp$0.<testJboss: void <init>()>();
        virtualinvoke this.<testJboss: void getTest(testJboss)>(temp$0);
        goto label2;

     label1:
        nop;
        temp$1 = new testJboss;
        specialinvoke temp$1.<testJboss: void <init>()>();
        b = temp$1;
        virtualinvoke this.<testJboss: void getTest(testJboss)>(b);

     label2:
        nop;
        return;
    }

    public void methodA(org.jboss.remoting.detection.Detector) throws java.lang.Exception
    {
        testJboss this;
        org.jboss.remoting.detection.Detector dec;
        java.lang.Exception e, e, e, e;
        java.lang.Throwable temp$0;
        int i, temp$1, temp$2, temp$3, temp$4;

        this := @this: testJboss;
        dec := @parameter0: org.jboss.remoting.detection.Detector;

     label0:
        nop;
        interfaceinvoke dec.<org.jboss.remoting.detection.Detector: void start()>();

     label1:
        nop;

     label2:
        nop;
        interfaceinvoke dec.<org.jboss.remoting.detection.Detector: void stop()>();
        goto label4;

     label3:
        nop;
        e := @caughtexception;
        nop;
        goto label4;

     label4:
        nop;
        goto label14;

     label5:
        nop;
        e := @caughtexception;

     label6:
        nop;

     label7:
        nop;
        interfaceinvoke dec.<org.jboss.remoting.detection.Detector: void stop()>();
        goto label9;

     label8:
        nop;
        e := @caughtexception;
        nop;
        goto label9;

     label9:
        nop;
        return;

     label10:
        nop;
        temp$0 := @caughtexception;

     label11:
        nop;
        interfaceinvoke dec.<org.jboss.remoting.detection.Detector: void stop()>();
        goto label13;

     label12:
        nop;
        e := @caughtexception;
        nop;
        goto label13;

     label13:
        nop;
        throw temp$0;

     label14:
        nop;
        i = 0;

     label15:
        nop;
        if i < 10 goto label16;

        goto label17;

     label16:
        nop;
        temp$1 = i;
        temp$2 = temp$1 + 1;
        i = temp$2;
        nop;
        temp$3 = i;
        temp$4 = temp$3 + 1;
        i = temp$4;
        goto label15;

     label17:
        nop;
        return;

        catch java.lang.Exception from label2 to label3 with label3;
        catch java.lang.Exception from label7 to label8 with label8;
        catch java.lang.Exception from label11 to label12 with label12;
        catch java.lang.Exception from label0 to label1 with label5;
        catch java.lang.Throwable from label0 to label1 with label10;
        catch java.lang.Throwable from label1 to label6 with label10;
    }

    public void methodB()
    {
        testJboss this;
        java.lang.String[] defaultExclusions, temp$0, temp$3;
        java.util.Vector fExcluded, temp$1;
        int i, temp$2, temp$4, temp$6, temp$7, temp$19, temp$20, temp$22;
        java.lang.String temp$5, key, path, temp$16, temp$17, temp$21;
        java.io.InputStream is, temp$9;
        java.lang.Class temp$8;
        java.util.Properties p, temp$10;
        java.io.IOException e, e, e, e;
        java.lang.Throwable temp$11;
        java.util.Enumeration e, temp$12;
        boolean temp$13, temp$15, temp$18;
        java.lang.Object temp$14;

        this := @this: testJboss;
        temp$0 = newarray (java.lang.String)[0];
        defaultExclusions = temp$0;
        temp$1 = new java.util.Vector;
        specialinvoke temp$1.<java.util.Vector: void <init>(int)>(10);
        fExcluded = temp$1;
        i = 0;

     label0:
        nop;
        temp$2 = lengthof defaultExclusions;
        if i < temp$2 goto label1;

        goto label2;

     label1:
        nop;
        temp$3 = defaultExclusions;
        temp$4 = i;
        temp$5 = temp$3[temp$4];
        virtualinvoke fExcluded.<java.util.Vector: void addElement(java.lang.Object)>(temp$5);
        nop;
        temp$6 = i;
        temp$7 = temp$6 + 1;
        i = temp$7;
        goto label0;

     label2:
        nop;
        temp$8 = virtualinvoke this.<testJboss: java.lang.Class getClass()>();
        temp$9 = virtualinvoke temp$8.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("");
        is = temp$9;
        if is == null goto label3;

        goto label4;

     label3:
        nop;
        return;

     label4:
        nop;
        temp$10 = new java.util.Properties;
        specialinvoke temp$10.<java.util.Properties: void <init>()>();
        p = temp$10;

     label5:
        nop;
        virtualinvoke p.<java.util.Properties: void load(java.io.InputStream)>(is);

     label6:
        nop;

     label7:
        nop;
        virtualinvoke is.<java.io.InputStream: void close()>();
        goto label9;

     label8:
        nop;
        e := @caughtexception;
        nop;
        goto label9;

     label9:
        nop;
        goto label19;

     label10:
        nop;
        e := @caughtexception;

     label11:
        nop;

     label12:
        nop;
        virtualinvoke is.<java.io.InputStream: void close()>();
        goto label14;

     label13:
        nop;
        e := @caughtexception;
        nop;
        goto label14;

     label14:
        nop;
        return;

     label15:
        nop;
        temp$11 := @caughtexception;

     label16:
        nop;
        virtualinvoke is.<java.io.InputStream: void close()>();
        goto label18;

     label17:
        nop;
        e := @caughtexception;
        nop;
        goto label18;

     label18:
        nop;
        throw temp$11;

     label19:
        nop;
        temp$12 = virtualinvoke p.<java.util.Properties: java.util.Enumeration propertyNames()>();
        e = temp$12;

     label20:
        nop;
        temp$13 = interfaceinvoke e.<java.util.Enumeration: boolean hasMoreElements()>();
        if temp$13 == 0 goto label28;

        goto label21;

     label21:
        nop;
        temp$14 = interfaceinvoke e.<java.util.Enumeration: java.lang.Object nextElement()>();
        key = (java.lang.String) temp$14;
        temp$15 = virtualinvoke key.<java.lang.String: boolean startsWith(java.lang.String)>("excluded.");
        if temp$15 == 0 goto label27;

        goto label22;

     label22:
        nop;
        temp$16 = virtualinvoke p.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(key);
        path = temp$16;
        temp$17 = virtualinvoke path.<java.lang.String: java.lang.String trim()>();
        path = temp$17;
        temp$18 = virtualinvoke path.<java.lang.String: boolean endsWith(java.lang.String)>("*");
        if temp$18 == 0 goto label24;

        goto label23;

     label23:
        nop;
        temp$19 = virtualinvoke path.<java.lang.String: int length()>();
        temp$20 = temp$19 - 1;
        temp$21 = virtualinvoke path.<java.lang.String: java.lang.String substring(int,int)>(0, temp$20);
        path = temp$21;

     label24:
        nop;
        temp$22 = virtualinvoke path.<java.lang.String: int length()>();
        if temp$22 > 0 goto label25;

        goto label26;

     label25:
        nop;
        virtualinvoke fExcluded.<java.util.Vector: void addElement(java.lang.Object)>(path);

     label26:
        nop;

     label27:
        nop;
        nop;
        goto label20;

     label28:
        nop;
        return;

        catch java.io.IOException from label7 to label8 with label8;
        catch java.io.IOException from label12 to label13 with label13;
        catch java.io.IOException from label16 to label17 with label17;
        catch java.io.IOException from label5 to label6 with label10;
        catch java.lang.Throwable from label5 to label6 with label15;
        catch java.lang.Throwable from label6 to label11 with label15;
    }

    public void <init>()
    {
        testJboss this;

        this := @this: testJboss;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }
}
