<?xml version="1.0" encoding="UTF-8"?>
<Automachine  >
 <!-- 描述缺陷 -->
	<description>调用f1之后必须调用f2</description>
	<!-- 错误报告信息 -->
	<errorMessage>call f1 but not call f2</errorMessage>
	<!-- 状态机结束表示违反缺陷 -->
	<endMeanViolateDefect>false</endMeanViolateDefect>
	<!-- 需要关注对象，需要控制流分析 -->
	<objectSensitive>true</objectSensitive>
	<!-- 只关注某个类的对象（只为某些对象创建自动机），如果关注所有对象可以不需要该元素 -->
	<onlyConcernClass>edu.pku.cn.testcase.TestCoupleFunctionExample</onlyConcernClass>
	<!-- 所有opcode都推动对象的自动机（有些opcode不是作用在对象上的） -->
	<allOpcodePushOjectAutomachine>false</allOpcodePushOjectAutomachine>
	<!-- 缺陷的严重程度，0最小 -->
	<severeLevel>0</severeLevel>
	<!-- 一个自动机可以有多个状态 -->
	<state>
	        <!-- 状态编号 -->
		<number>1</number>
		<!-- 是否是终止状态 -->
		<isEndState>false</isEndState>
		<!-- 是否是初始状态 -->
		<isOriginState>true</isOriginState>
		<!-- 如果匹配不上所有边则跳转到状态 -->
		<exceptionState>1</exceptionState>
		<!-- 一个状态可以有多条边 -->
		<edge>
		                <!-- 边的类型 -->
				<class>VisitMethodInsnEdge</class>
				<!-- 目的状态 -->
				<toState>2</toState>
				<!-- 具体属性参见该种类边的java源文件中的属性 -->
				<opcode>invokevirtual</opcode>
				<owner>edu.pku.cn.testcase.TestCoupleFunctionExample</owner>
				<name>f1</name>
				<desc>()V</desc>
			</edge>
			

	</state>
	
	<state>
		<number>2</number>
		<isEndState>false</isEndState>
		<isOriginState>false</isOriginState>
		<exceptionState>2</exceptionState>
		
			<edge>
				<class>VisitMethodInsnEdge</class>
				<toState>3</toState>
				<opcode>invokevirtual</opcode>
				<owner>edu.pku.cn.testcase.TestCoupleFunctionExample</owner>
				<name>f2</name>
				<desc>()V</desc>
			</edge>
			
	</state>
	
	<state>
		<number>3</number>		
		<isEndState>true</isEndState>
		<isOriginState>false</isOriginState>
		<exceptionState>3</exceptionState>
	</state>

</Automachine>
