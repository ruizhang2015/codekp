/*
 * PKU Confidential
 * 
 * OCO Source Materials
 * 
 * PKU Software Lab
 * @author Administrator
 * @time 2009-3-20 ����10:46:37
 * @modifier: Administrator
 * @time 2009-3-20 ����10:46:37
 * @reviewer: Administrator
 * @time 2009-3-20 ����10:46:37
 * (C) Copyright PKU Software Lab. 2009
 * 
 * The source code for this program is not published or otherwise divested of
 * its trade secrets.
 * 
 */
package edu.pku.cn.detector.analysis;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.objectweb.asm.tree.InsnList;
import org.objectweb.asm.tree.LocalVariableNode;
import org.objectweb.asm.tree.MethodNode;
import org.objectweb.asm.tree.analysis.AnalyzerException;

import edu.pku.cn.analysis.LiveVariableDataflowAnalysis;
import edu.pku.cn.analysis.RealValueDataflowAnalysis;
import edu.pku.cn.analysis.factory.LiveVariableDataflowFactory;
import edu.pku.cn.analysis.factory.RealValueDataflowFactory;
import edu.pku.cn.asm.tree.analysis.LoadStoreFact;
import edu.pku.cn.bugreport.BugInstance;
import edu.pku.cn.detector.Detector;
import edu.pku.cn.detector.MethodDetector;
import edu.pku.cn.util.AnalysisFactoryManager;
import edu.pku.cn.util.OpcodeUtil;

/**
 * Find repeated def For example int a; then a is not defined
 * ����߼������cfg����ڴ
 * �fact.bitSet�����Ƿ����ĳ������δ��def�ļ���������ڣ���˵���ñ�����Ȼ������δ����ֵ
 * 
 * @author Administrator
 */
public class FindUninitializedLocalVariable extends MethodDetector {

	private LoadStoreFact fact = null;

	// private LoadStoreFact[] facts = null;

	private boolean DEBUG = false;

	private InsnList insns = null;

	private RealValueDataflowAnalysis rvAnalysis = null;

	private LiveVariableDataflowAnalysis liveAnalysis = null;

	@Override
	public ArrayList<Detector> getInstances() {
		// TODO Auto-generated method stub
		ArrayList<Detector> detectors = new ArrayList<Detector>();
		detectors.add(new FindUninitializedLocalVariable());
		return detectors;
	}

	@Override
	public void visitCode() {
		super.visitCode();
		insns = node.instructions;
		if (DEBUG) {
			OpcodeUtil.printInsnList(insns, name);
		}
		try {
			rvAnalysis = (RealValueDataflowAnalysis) AnalysisFactoryManager.lookup(RealValueDataflowFactory.NAME)
					.getAnalysis(node.getCFG());
			Set<LocalVariableNode> arguments = rvAnalysis.getArguments();

			liveAnalysis = (LiveVariableDataflowAnalysis) AnalysisFactoryManager.lookup(
					LiveVariableDataflowFactory.NAME).getAnalysis(node.getCFG());
			fact = liveAnalysis.getResultFact(node.getCFG().getRoot());

			int locals = liveAnalysis.getLocals();
			if (DEBUG)
				System.out.println(liveAnalysis);

			for (int i = 0; i < locals; i++) {
				String name = liveAnalysis.getLocalVariableNode(i).name;
				if (!fact.bitSet.get(locals + i) && // the local variable is not
						// defined or initialized
						!name.equals("$outer") && // the local variable is not
						// "outer"
						!name.equals("") && // the local variable is not
						// generated by the system, such as
						// Exception
						!arguments.contains(liveAnalysis.getLocalVariableNode(i))// the
																					// local
																					// variable
				// is not passed-in
				// argument
				) {
					BugInstance instance = new BugInstance(BugInstance.format(getBugPattern(
							"UNINITIALIZED_LOCAL_VARIABLE").getLongDescription(), new String[] { liveAnalysis
							.getLocalVariableNode(i).name }), this.currentLine);// cannot
																				// give
																				// precise
																				// information
					// of line number
					reportor.report(node.owner, instance);
				}
			}
		} catch (AnalyzerException e) {
			e.printStackTrace();
		}
	}
}

// end
