<?xml version="1.0" encoding="UTF-8"?>
<Automachine  >
	<description>当使用类javax.resource.spi.work.WorkManager时，方法调用要遵循以下顺序:必须首先调用startWork随后可以多次调用方法doWork,scheduleWork</description>
	<errorMessage>当使用类{0}时，方法调用要遵循以下顺序:必须首先调用startWork随后可以多次调用方法doWork,scheduleWork</errorMessage>
	<endMeanViolateDefect>true</endMeanViolateDefect>
	<objectSensitive>false</objectSensitive>
	<onlyConcernClass>javax.resource.spi.work.WorkManager</onlyConcernClass>
	<allOpcodePushOjectAutomachine>false</allOpcodePushOjectAutomachine>	
	<severeLevel>0</severeLevel>
	<state>
			<number>1</number>
			<isEndState>false</isEndState>
			<isOriginState>true</isOriginState>
			<exceptionState>1</exceptionState>		
			<edge>
					<class>VisitMethodInsnEdge</class>
					<toState>2</toState>
					<opcode>invokeinterface</opcode>
					<owner>javax.resource.spi.work.WorkManager</owner>
					<name>startWork</name>
					<desc>(Ljavax/resource/spi/work/Work;)J</desc>
			</edge>
						<edge>
					<class>VisitMethodInsnEdge</class>
					<toState>2</toState>
					<opcode>invokeinterface</opcode>
					<owner>javax.resource.spi.work.WorkManager</owner>
					<name>startWork</name>
					<desc>(Ljavax/resource/spi/work/Work;JLjavax/resource/spi/work/ExecutionContext;Ljavax/resource/spi/work/WorkListener;)J</desc>
			</edge>
						<edge>
					<class>VisitMethodInsnEdge</class>
					<toState>3</toState>
					<opcode>invokeinterface</opcode>
					<owner>javax.resource.spi.work.WorkManager</owner>
					<name>doWork</name>
					<desc>(Ljavax/resource/spi/work/Work;)V</desc>
			</edge>
						<edge>
					<class>VisitMethodInsnEdge</class>
					<toState>3</toState>
					<opcode>invokeinterface</opcode>
					<owner>javax.resource.spi.work.WorkManager</owner>
					<name>doWork</name>
					<desc>(Ljavax/resource/spi/work/Work;JLjavax/resource/spi/work/ExecutionContext;Ljavax/resource/spi/work/WorkListener;)V</desc>
			</edge>
						<edge>
					<class>VisitMethodInsnEdge</class>
					<toState>3</toState>
					<opcode>invokeinterface</opcode>
					<owner>javax.resource.spi.work.WorkManager</owner>
					<name>scheduleWork</name>
					<desc>(Ljavax/resource/spi/work/Work;)V</desc>
			</edge>
						<edge>
					<class>VisitMethodInsnEdge</class>
					<toState>3</toState>
					<opcode>invokeinterface</opcode>
					<owner>javax.resource.spi.work.WorkManager</owner>
					<name>scheduleWork</name>
					<desc>(Ljavax/resource/spi/work/Work;JLjavax/resource/spi/work/ExecutionContext;Ljavax/resource/spi/work/WorkListener;)V</desc>
			</edge>				
	</state>
	<state>
			<number>2</number>
			<isEndState>false</isEndState>
			<isOriginState>false</isOriginState>
			<exceptionState>2</exceptionState>		
						<edge>
					<class>VisitMethodInsnEdge</class>
					<toState>2</toState>
					<opcode>invokeinterface</opcode>
					<owner>javax.resource.spi.work.WorkManager</owner>
					<name>doWork</name>
					<desc>(Ljavax/resource/spi/work/Work;)V</desc>
			</edge>
						<edge>
					<class>VisitMethodInsnEdge</class>
					<toState>2</toState>
					<opcode>invokeinterface</opcode>
					<owner>javax.resource.spi.work.WorkManager</owner>
					<name>doWork</name>
					<desc>(Ljavax/resource/spi/work/Work;JLjavax/resource/spi/work/ExecutionContext;Ljavax/resource/spi/work/WorkListener;)V</desc>
			</edge>
						<edge>
					<class>VisitMethodInsnEdge</class>
					<toState>2</toState>
					<opcode>invokeinterface</opcode>
					<owner>javax.resource.spi.work.WorkManager</owner>
					<name>scheduleWork</name>
					<desc>(Ljavax/resource/spi/work/Work;)V</desc>
			</edge>
						<edge>
					<class>VisitMethodInsnEdge</class>
					<toState>2</toState>
					<opcode>invokeinterface</opcode>
					<owner>javax.resource.spi.work.WorkManager</owner>
					<name>scheduleWork</name>
					<desc>(Ljavax/resource/spi/work/Work;JLjavax/resource/spi/work/ExecutionContext;Ljavax/resource/spi/work/WorkListener;)V</desc>
			</edge>						
	</state>
		<state>
		<number>3</number>		
		<isEndState>true</isEndState>
		<isOriginState>false</isOriginState>
		<exceptionState>3</exceptionState>
	</state>
</Automachine>